# INSTALL KIND = k8ss in docker 
# Reference: https://kind.sigs.k8s.io/docs/user/quick-start/
# Note: Precondition ..make sure  docker installed 

#On Mac & Linux:
curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.6.1/kind-$(uname)-amd64
chmod +x ./kind
mv ./kind /some-dir-in-your-PATH/kind

#On Mac via Homebrew:
brew install kind

#On Windows:
curl.exe -Lo kind-windows-amd64.exe https://github.com/kubernetes-sigs/kind/releases/download/v0.6.1/kind-windows-amd64
Move-Item .\kind-windows-amd64.exe c:\some-dir-in-your-PATH\kind.exe
# OR via Chocolatey (https://chocolatey.org/packages/kind)
choco install kind


###################################################
# Create an cluster 
kind create cluster --config cluster-config.yaml --name kind-example
kubectl cluster-info --context kind-kind-example
kubectl config view
kubectl config use-context kind-kind-example

kubectl get nodes
kubectl get pods -o wide --all-namespaces
kubectl get pods -o wide  --all-namespaces | grep "control-plane"
kubectl get pods -o wide  --all-namespaces | grep "worker2"
kubectl get pods -o wide  --all-namespaces | grep "worker "



# Let start Example 

# Example-1 Hello-minikube
kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10
kubectl scale --replicas=1 deployment/hello-minikube


kubectl expose deployment hello-minikube --type=NodePort --port=8080
kubectl port-forward service/node-hello 8080:8080
http://localhost:8080

kubectl expose deployment hello-minikube --name=hello-minikube1 --port=8080
kubectl proxy
#check services
http://localhost:8001/api/v1/namespaces/default/services
http://localhost:8001/api/v1/namespaces/default/services/http:node-hello:/proxy/
kubectl delete services hello-minikube
kubectl delete services hello-minikube1
kubectl delete deployment hello-minikube

#Try another Example: kubectl create deployment node-hello --image=gcr.io/google-samples/node-hello:1.0 --port=8080


#Example-2 : Nginx 
kubectl apply -f nginx-deployment.yaml
kubectl describe deployment nginx-deployment
kubectl get pods -l app=nginx
kubectl describe pod <pod-name>
update deployment : image: nginx:1.8 # Update the version of nginx from 1.7.9 to 1.8 
update deployment: replicas: 4 # Update the replicas from 2 to 4 
kubectl delete deployment/nginx-deployment


#Example-3 : stateful application 
kubectl apply -f  mysql-pv.yaml
kubectl apply -f  mysql-deployment.yaml
kubectl describe deployment mysql
kubectl describe deployment mysql
kubectl describe pvc mysql-pv-claim
### Run the mysql client to test
kubectl run -it --rm --image=mysql:5.6 --restart=Never mysql-client -- mysql -h mysql -ppassword
kubectl delete deployment,svc mysql
kubectl delete pvc mysql-pv-claim
kubectl delete pv mysql-pv-volume

#Make sure docker space available in system 
#docker system prune -a

kubectl apply -f pv-pod.yaml
kubectl exec -it task-pv-pod -- /bin/bash
# Be sure to run these 3 commands inside the root shell that comes from
# running "kubectl exec" in the previous step
apt update
apt install curl
curl http://localhost/
#The output shows the text that you wrote to the index.html file on the hostPath volume:
#Hello from Kubernetes storage

#Try End To End Exaple WordPress Example
# in application folder : run.sh
kubeproxy
http://localhost:8001/api/v1/namespaces/default/services/wordpress:/proxy/wp-admin/install.php



# Example-4: Horizoantal pod Autoscaling (HPA)
kubectl run php-apache --image=k8s.gcr.io/hpa-example --requests=cpu=200m --limits=cpu=500m --expose --port=80
kubectl get pod
kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10

## increase load
kubectl run --generator=run-pod/v1 -it --rm load-generator --image=busybox /bin/sh
Hit enter for command prompt
while true; do wget -q -O- http://php-apache.default.svc.cluster.local; done

kubectl get deployment php-apache
kubectl delete service php-apache
kubectl delete deployment php-apache
kubectl delete hpa php-apache



